// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

enum ProjectContributorState {
  ASSIGNED
  CONTACTED
  REFUSED
  VALIDATED
}

enum Role {
  ADMINISTRATOR
  MANAGER
  MEMBER
}

// =========================================================
// Models

model Contributor {
  id          String   @id @default(cuid())
  pipedriveId Int      @unique
  firstName   String
  lastName    String
  category    String?
  position    String?
  email       String
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projects ProjectsContributors[]
}

model Lead {
  id          String   @id @default(cuid())
  pipedriveId Int      @unique
  firstName   String
  lastName    String
  category    String?
  position    String?
  email       String
  phone       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  projects       Project[]
}

model Organization {
  id          String   @id @default(cuid())
  pipedriveId Int      @unique
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  leads    Lead[]
  projects Project[]
}

model Project {
  id          String   @id @default(cuid())
  name        String
  need        String?
  description String?
  note        String?
  hasStarted  Boolean  @default(false)
  hasEnded    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  contributors   ProjectsContributors[]
  lead           Lead                   @relation(fields: [leadId], references: [id])
  leadId         String
  organization   Organization           @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User                   @relation(fields: [userId], references: [id])
  userId         String
}

model ProjectsContributors {
  state     ProjectContributorState
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt

  contributor   Contributor @relation(fields: [contributorId], references: [id])
  contributorId String
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String

  @@id([contributorId, projectId])
}

model Token {
  id        String   @id @default(cuid())
  email     String
  ip        String
  value     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  email     String   @unique
  password  String
  firstName String
  lastName  String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Project Project[]
}
