// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

// =========================================================
// Constants

enum ProspectState {
  ADDED
  CONTACTED
  REFUSED
  REGISTERED
}

enum ProjectContributorState {
  ASSIGNED
  CONTACTED
  REFUSED
  SUCCESSFUL
  VALIDATED
}

enum SettingKey {
  // Tell Me App URL
  TELL_ME_CONTRIBUTOR_SURVEY_ID
  // Tell Me App URL
  TELL_ME_LEAD_SURVEY_ID
  // Tell Me Personal Access Token
  TELL_ME_PAT
  // Tell Me App URL
  TELL_ME_URL
}

enum Role {
  ADMINISTRATOR
  MANAGER
  MEMBER
}

// =========================================================
// Models

model ContactCategory {
  id                           String   @id @default(cuid())
  label                        String   @unique
  description                  String?
  contributorSurveyAnswerValue String?
  leadSurveyAnswerValue        String?
  createdAt                    DateTime @default(now())
  updatedAt                    DateTime @updatedAt

  prospects    Prospect[]
  leads        Lead[]
  contributors Contributor[]
}

model Contributor {
  id                String   @id @default(cuid())
  firstName         String
  lastName          String
  category          String?
  position          String?
  email             String
  phone             String?
  note              String?
  synchronizationId String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  contactCategory   ContactCategory?         @relation(fields: [contactCategoryId], references: [id])
  contactCategoryId String?
  projects          ContributorsOnProjects[]
  // synchronization   ContributorsOnSynchronization?
}

model ContributorsOnProjects {
  state     ProjectContributorState @default(ASSIGNED)
  createdAt DateTime                @default(now())
  updatedAt DateTime                @updatedAt

  contributor   Contributor @relation(fields: [contributorId], references: [id])
  contributorId String
  project       Project     @relation(fields: [projectId], references: [id])
  projectId     String

  @@id([contributorId, projectId])
}

model Lead {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  category  String?
  position  String?
  email     String
  phone     String?
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  contactCategory   ContactCategory? @relation(fields: [contactCategoryId], references: [id])
  contactCategoryId String?
  organization      Organization     @relation(fields: [organizationId], references: [id])
  organizationId    String
  projects          Project[]
}

model Organization {
  id        String   @id @default(cuid())
  name      String
  note      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  leads    Lead[]
  projects Project[]
}

model Project {
  id                String   @id @default(cuid())
  name              String
  need              String?
  description       String?
  note              String?
  hasStarted        Boolean  @default(false)
  hasEnded          Boolean  @default(false)
  isUnlocked        Boolean  @default(false)
  synchronizationId String?  @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  contributors   ContributorsOnProjects[]
  lead           Lead                     @relation(fields: [leadId], references: [id])
  leadId         String
  organization   Organization             @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User                     @relation(fields: [userId], references: [id])
  userId         String
}

model Prospect {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  position     String?
  email        String
  phone        String?
  note         String?
  state        ProspectState @default(ADDED)
  organization String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  contactCategory   ContactCategory @relation(fields: [contactCategoryId], references: [id])
  contactCategoryId String
}

model RefreshToken {
  id        String   @id @default(cuid())
  familyId  String?
  ip        String
  value     String   @unique
  createdAt DateTime @default(now())
  expiredAt DateTime

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Synchronization {
  id                           String   @id @default(cuid())
  isSuccessful                 Boolean
  lastContributorSurveyEntryId String
  lastLeadSurveyEntryId        String
  logs                         String[]
  createdAt                    DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Setting {
  id          String     @id @default(cuid())
  key         SettingKey @unique
  description String?
  value       String
}

model User {
  id        String   @id @default(cuid())
  role      Role     @default(MEMBER)
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects         Project[]
  refreshTokens    RefreshToken[]
  synchronizations Synchronization[]
}
